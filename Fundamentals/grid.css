@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap');
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: 'Open Sans', sans-serif;
  font-size: 16px;
  line-height: 1.5;
  color: #333;
  background: #f5f5f5;
}

.container {
  max-width: 1000px;
  margin: 100px auto;
  padding: 10px;
  /* display: grid doesn't have any effect at all until you mention how many columns or row you want and how big those rows or columns to be */
  display: grid;
  /* grid-template-columns: 100px 200px 300px; */
  /* grid-template-columns: 30% 30% 30%; */
  /* grid-template-columns: 1fr 1fr 1fr; */
  /* same as above code */
  /* grid-template-columns: repeat(3, 1fr); */
  /* Make grid responsive with repeat(auto-fill, minmax(200px, 1fr) */
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));

  /* For setting margin between grid items we use column-gap or row-gap */
  /* gap is a shorthand for both column-gap and row-gap */
  gap: 10px;
  /* Some properties which are associated with rows and their heights */
  /* grid-auto-rows property specifies height of every grid item regardless of content */
  /* grid-auto-rows: 200px; */
  /* grid-auto-rows: minmax(200px, auto); */
  /* grid-template-rows: 200px 100px 200px; */
  /* grid-template-rows: repeat(3, 1fr); */
  /* align-items: start;
  align-items: center;
  align-items: end;
  justify-content: center; */
}
.item {
  background: steelblue;
  color: #fff;
  font-size: 20px;
  padding: 20px;
  border: 1px solid skyblue;
  /* align-self: center; */
  /* We use margin on Flexboxs */
  /* margin: 10px; */
}

/* On Screens which their width is equal to 500px or less apply this CSS */
@media (max-width: 500px) {
  .container {
    grid-template-columns: 1fr;
  }
}

/* @media (max-width: 600px) {
  .container {
    grid-template-columns: 1fr 1fr;
  }
} */
